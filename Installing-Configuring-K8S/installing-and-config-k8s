-Package Installation
- ssh ubuntu19-desktop (facem ssh pe masina/nodul care va fi master, in cazul meu-ubuntu19-desktop)
	- sudo swapoff -a (disable swap, but not permanently)
	- nano /etc/fstab (and comment the line with swap file, and disable it permanently)
		#/swapfile   none    swap    sw    0    0

	- sudo reboot
	- after reboot check if swap is disabled: cat /etc/fstab

	- Add Google's repository gpg key
		- sudo apt-get update && sudo apt-get install -y apt-transport-https curl
		- curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

	- Add the K8S apt repository
		- cat <<EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list deb https://apt.kubernetes.io/ kubernetes-xenial main EOF

		  sau: 
		    - echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list

	- Update the package list and use apt-cache to inspect versions available in the repository
		- sudo apt update
		- apt-cache policy kubelet | head -n 20
		- apt-cache policy docker-io | head -n 20

	- Install the required packages, if needed we can request a specific version
		- sudo apt install -y docker.io kubelet kubeadm kubectl
		- sudo apt-mark hold docker.io kubelet kubeadm kubectl

	- Check the status of our kubelet and our container runtime, docker.
          The kubelet will enter a crashloop until it's joined.
		- sudo systemctl status kubelet.service
  		- sudo systemctl status docker.service

	- Ensure both are set to start when the system starts up.
		- sudo systemctl enable kubelet.service
		- sudo systemctl enable docker.service

		- sudo systemctl start kubelet.service
		- sudo systemctl start docker.service

		- sudo systemctl status kubelet.service
		- sudo systemctl status docker.service


	- Creating a master
	- Only on the master, download the yaml files for the pod network
		- wget https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/rbac-kdd.yaml
		- wget https://docs.projectcalico.org/v3.10/manifests/calico.yaml
		- ls -l
		- nano calico.yaml (and search in file 192.168.0.0/16)

	- Create our kubernetes cluster, specifuing a pod network range matching that in calcio.yaml
		- sudo kubeadm init --pod-network-cidr=192.168.0.0/16 (o sa dureze/ruleze vreo 120 secunde aproximativ)

	- Configure our account on the master to have admin access to the API server from a non-privileged account.
		- mkdir -p $HOME/.kube
			- ls -la / ls -la | grep .kube

		- sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
			- ls -l .kube/config (see the owner)

		- sudo chown $(id -u):$(id -g) $HOME/.kube/config
			- ls -l .kube/config (see the owner)

	- Download yaml files for your pod network
		- kubectl apply -f rbac-kdd.yaml
		- kubectl apply -f calico.yaml

	- Look for the all the system pods and calico pod to change to Running
          The DNS pod won-t start until the Pod network is deployed and Running
		- kubectl get pods --all-namespaces

	- Gives you output over time, rather than repainting the screen on each iteration
		- kubectl get pods --all-namespaces --watch

	- Get a list of our current nodes, just the master
		- kubectl get nodes

	- Delete all pods with namespace
		- kubectl delete --all pods --namespace=kube-system

	- Remember the kubelet starts static pod manifests, and thus the core cluster pods
		- sudo systemctl status kubelet.service

	- Check out the directory where the kubeconfig files live
		- ls -l /etc/kubernetes

	- Let's check out the manifests on the master
		- ls -l /etc/kubernetes/manifests

	- And look more closely at API server and etcd's manifest
		- sudo more /etc/kubernetes/manifests/etcd.yaml
		- sudo more /etc/kubernetes/manifests/kube-apiserver.yaml



	- Create Nodes. Adding a node to your cluster (who was created on vm - ubuntu19-desktop)
		- ssh ubuntu19-server
			- sudo swapoff -a (disable swap, but not permanently)
			- nano /etc/fstab (and comment the line with swap file, and disable it permanently)
				#/swapfile   none    swap    sw    0    0

			- sudo reboot
			- after reboot check if swap is disabled: cat /etc/fstab

			- Add Google's repository gpg key
				- sudo apt-get update && sudo apt-get install -y apt-transport-https curl
				- curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

			- Add the K8S apt repository 
				- echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list

			- Update the package list and use apt-cache to inspect versions available in the repository
				- sudo apt update
				- apt-cache policy kubelet | head -n 20
				- apt-cache policy docker-io | head -n 20

			- Install the required packages, if needed we can request a specific version
				- sudo apt install -y docker.io kubelet kubeadm kubectl
				- sudo apt-mark hold docker.io kubelet kubeadm kubectl

			- Check the status of our kubelet and our container runtime, docker
			  The kubelet will enter a crashloop until it's joined
				- sudo systemctl status kubelet.service
		  		- sudo systemctl status docker.service

			- Ensure both are set to start when the system starts up
				- sudo systemctl enable kubelet.service
				- sudo systemctl enable docker.service
				- sudo systemctl start kubelet.service
				- sudo systemctl start docker.service
				- sudo systemctl status kubelet.service
				- sudo systemctl status docker.service
					- In cazul in care avem probleme cu "enable" docker service sau cu "start" docker service, rulam:
						- systemctl status docker.service
						- sudo file /lib/systemd/system/docker.socket
						- sudo file /lib/systemd/system/docker.service
						- sudo systemctl unmask docker.service
						- sudo systemctl unmask docker.socket
						- sudo systemctl enable docker.service
						- sudo systemctl start docker.service
						- sudo systemctl status docker.service

					- In cazul in care avem deja instalata o versiune de docker si vrem s-o stergem, rulam:
						- sudo apt-get remove containerd.io
						- sudo apt-get purge containderd.io docker.io
						- sudo apt-get update && sudo apt-get upgrade


		- ssh ubuntu19-desktop (ssh on kubect master node)
			- If you didn't keep the output, on the master, you can get the token
				- kubeadm token list

			- If you need to generate a new token, perhaps the old one timed out/expired
				- kubeadm token create

			- On the master, you can find the ca cert hash.
				- openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'


		- ssh ubuntu19-server (ssh on kubelet client node)
			- Using the master (API Server) IP address or name, the token and the cert has, let's join this Node to our cluster
				- sudo kubeadm join 10.0.2.15:6443 --token a2si5m.j6rsaqjdgliv3e0q --discovery-token-ca-cert-hash sha256:7e91d409dcf01519fea1b5b78c6ac43138cc42c808dc0327cf73e29d92dddc58

		- troubleshooting pods
			- kubectl describe pod -n kube-system calico-node-9pwtg(exemplu de nume pod)
			- delete node: kubectl delete node ubuntu19-desktop(exemplu de nume nod)



	- Working with my Kubernetes Cluster
		- ssh ubuntu19-desktop (ssh on kubect master node)
			- Listing and Inspecting your cluster, pods, services and more
				- kubectl cluster-info
			
			- Review status and roles
				- kubectl get nodes
		
			- Additional info about each node in the cluster
				- kubectl get nodes -o wide

			- Let's get a list of pods...but there isn't any running
				- kubectl get pods

			- True, but let's get a list of system pods. A namespace is a way to group resources together
				- kubectl get pods --namespace kube-system

			- Let's get additional info about each pod
				- kubectl get pods --namespace kube-system -o wide

			- Now let's get a list of everything that's running in all namespaces
				- kubectl get all --all-namespaces | more

			- Asking kubernetes for the resources it knows about
				- kubectl api-resources | head -n 10

			- We can easily filter using group
				- kubectl api-resources | grep pod

			- Explain an individual resource in detail
				- kubectl explain pod | more
				- kubectl explain pod.spec | more
				- kubectl explain pod.spec.containers | more

			- You'll soon find your favorite alias
				- kubectl get no

			- Let's take a closer look at our nodes using Describe
				- kubectl describe nodes ubuntu19-desktop

			- Now that we're tired of typing commands out, let's enable bash auto-complete of our kubectl commands
				- sudo apt install bash-completion
				- echo "source <(kubectl completion bash)" >> ~/.bashrc
				- source ~/.bashrc
				- kubectl g[tab][tab] po[tab][tab] --all[tab][tab]
				- kubectl -h | more
				- kubectl get -h | more
				- kubectl describe -h | more

	
			- Deployments and working with resources in your cluster
				- Imperatively working with your cluster. Run will "generate" a Deployment by default
				  This is pulling a specified image frim Google's container registry
				  kubectl run, will covert a pod creation into a "Deployment generation"
				  http://kubernetes.io/docs/user-guide/kubectl-conventions/#generators
					- kubectl run hello-world --image=gcr.io/google-samples/hello-app:1.0

				- But let's deploy a single pod too...
					- kubectl run hello-world-pod --image=gcr.io/google-samples/hello-app:1.0 --generator=run-pod/v1

				- Let's follow our pod and deployment status
					- kubectl get pods
					- kubectl get deployment
					- kubectl get pods -o wide
					- kubectl get --namespace kube-system all
					- kubectl get --namespace kube-system deployments coredns
					- kubectl get --namespace kube-system daemonset
					- kubectl get pods --namespace=default

				- Delete a pod
					- kubectl get pod --all-namespaces
					- kubectl delete pods hello-world(exempluu nume pod)

				- Delete all pods from a namespace
					- kubectl delete --all pods --namespace=kube-system

				- Delete node
					- kubectl delete node ubuntu19-desktop(exemplu nume node)


				- Creating a basic deployment.yaml file
					- mkdir -p /home/mihail/content/course/m2/demo
					- cd /home/mihail/content/course/m2/demo
						- nano deployment.yaml
							apiVersion: apps/v1
							kind: Deployment
							metadata:
							  name: hello-world
							spec:
							  replicas: 5
							  selector:
							    matchLabels:
							      app: hello-world
							  template:
							    metadata:
							      labels:
								app: hello-world
							    spec:
							      containers:
							      - name: hello-world
								image: gcr.io/google-samples/hello-app:1.0
								ports:
								- containerPort: 8080
							---
							apiVersion: v1
							kind: Service
							metadata:
							  name: hello-world
							spec:
							  selector:
							    app: hello-world
							  ports:
							  - port: 80
							    protocol: TCP
							    targetPort: 8080


						- kubectl apply -f deployment.yaml
						- kubectl get deployments hello-world
						- kubectl get pod --all-namespaces
						- kubectl get replicasets
						- kubectl get pods
						- kubectl describe pods | head -n 15
						- kubectl describe deployment
						- kubectl get service hello-world
						- kubectl delete deployment hello-world 
						- kubectl delete service hello-world


				- Creating a Deployment and ReplicaSet Controller Operations
					- cd /home/mihail/content/course/m2/demo
						- nano deployment-me.yaml
							apiVersion: apps/v1
							kind: Deployment
							metadata:
							  name: hello-world
							spec:
							  replicas: 5
							  selector:
							    matchExpressions:
							      - key: app
								operator: In
								values:
								  - hello-world-pod-me
							  template:
							    metadata:
							      labels:
								app: hello-world-pod-me
							    spec:
							      containers:
							      - name: hello-world
								image: gcr.io/google-samples/hello-app:1.0
								ports:
								- containerPort: 8080
							---
							apiVersion: v1
							kind: Service
							metadata:
							  name: hello-world
							spec:
							  selector:
							    app: hello-world
							  ports:
							  - port: 80
							    protocol: TCP
							    targetPort: 8080


						- kubectl apply -f deployment-me.yaml
						- kubectl get replicaset
						- kubectl describe replicaset hello-world
						- kubectl get pods
						- kubectl delete pods hello-world-[tab][tab]
						- kubectl get pods


				- Isolating a Pod from a ReplicaSet
					- cd /home/mihail/content/course/m2/demo
						- kubectl get pods --show-labels
						- kubectl describe ReplicaSets
						- kubectl get nodes --watch



		You should now deploy a pod network to the cluster.
		Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
		  https://kubernetes.io/docs/concepts/cluster-administration/addons/

		Then you can join any number of worker nodes by running the following on each as root:

		kubeadm join 10.0.2.15:6443 --token 9z9ybt.4geb9lm87z8hnjjp \
		    --discovery-token-ca-cert-hash sha256:22200250780cb03eef9c43d9b6c7f1f8e4a6389e77ce3fc677d3670ab2a6c84e


- LDAP -> Crowd -> Migrare catre o versiune noua(upgrade)
- Kibana -> Creare de useri -> Assignare de permisiuni per proiect
- Licenta crowd -> Expira in septembrie
















































	
