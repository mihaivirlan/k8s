- Go to home in Google Cloud -> Open shell -> Open text editor -> File -> New Folder -> Create a new folder named spikey-website ->
  in folder spikey-website -> create a new three files -> default.conf, Dockerfile, index.html

- default.conf file must contain:

server {
   listen       80;
   server_name  localhost;

   #charset koi8-r;
   #access_log  /var/log/nginx/log/host.access.log  main;

   location / {
       root   /usr/share/nginx/html;
       index  index.html index.htm;
   }

   #error_page  404              /404.html;

   # redirect server error pages to the static page /50x.html
   #
   error_page   500 502 503 504  /50x.html;
   location = /50x.html {
       root   /usr/share/nginx/html;
   }

   # proxy the PHP scripts to Apache listening on 127.0.0.1:80
   #
   #location ~ \.php$ {
   #    proxy_pass   http://127.0.0.1;
   #}

   # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
   #
   #location ~ \.php$ {
   #    root           html;
   #    fastcgi_pass   127.0.0.1:9000;
   #    fastcgi_index  index.php;
   #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
   #    include        fastcgi_params;
   #}

   # deny access to .htaccess files, if Apache's document root
   # concurs with nginx's one
   #
   #location ~ /\.ht {
   #    deny  all;
   #}
}



- Dockerfile must contain:

FROM nginx:alpine
COPY default.conf /etc/nginx/conf.d/default.conf
COPY index.html /usr/share/nginx/html/index.html



- index.html file must contain(or another custom index.html code/file):

<!DOCTYPE html>
<html lang="en">
<head>
  <title>Bootstrap Example</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
</head>
<body>

<div class="jumbotron text-center">
  <h1>My First Bootstrap Page</h1>
  <p>Resize this responsive page to see the effect!</p> 
</div>
  
<div class="container">
  <div class="row">
    <div class="col-sm-4">
      <h3>Column 1</h3>
      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit...</p>
      <p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris...</p>
    </div>
    <div class="col-sm-4">
      <h3>Column 2</h3>
      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit...</p>
      <p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris...</p>
    </div>
    <div class="col-sm-4">
      <h3>Column 3</h3>        
      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit...</p>
      <p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris...</p>
    </div>
  </div>
</div>

</body>
</html>



- click to open terminal/shell
	- export PS1="\[\e[34m\]\w\[e\[m\]>\n-->" <type enter>
	- gcloud auth login

	- gcloud container clusters list
	- gcloud container clusters create spikey-cluster --region us-central1-a
	- gcloud container clusters list

	- cd spikey-website
	- ls

	- gcloud config get-value project
	- export PROJECT_ID="$(gcloud config get-value project -q)"
	- docker build -t gcr.io/${PROJECT_ID}/spikeysales-website:v1 .

	- docker images
	- gcloud auth configure-docker

	- docker push gcr.io/${PROJECT_ID}/spikeysales-website:v1
	- Go to menu Google Cloud -> Tools -> Container Registry -> Images -> and see here the image: spikeysales-website ->
	  click on image and file additional details about her
	
	- gcloud components install kubectl
		- sudo apt-get install kubectl

	- kubectl config current-context
	- kubectl cluster-info

	- Go to menu Google Cloud -> Tools -> Container Registry -> Images -> and see here the image: spikeysales-website ->
	  click on image -> Click copy full image name -> and type in shell like follow:
		- kubectl run spikey-website --image gcr.io/mihai-281118/spikeysales-website@sha256:0c483158498222d513b75355a52b2c71153197626aa69d1f83e40c8aee857945 --replicas 3

	- kubectl expose deployment spikey-website --type LoadBalancer --port 80 --target-port 80 
		- sau daca nu gaseste "deployment" inlocuim cu "pod" astfel:
			- kubectl expose pod spikey-website --type LoadBalancer --port 80 --target-port 80

	- kubectl get service spikey-website

	- Delete a service:
		- kubectl delete service spikey-website

	- Delete a Workload:
		- kubectl delete pod spikey-website

		- And check from Google Cloud Menu -> Kebernetes Engine -> Workloads and Services&Ingress if were deleted successfully


	- Creating and Configuring Ingress Objects(with multiple services it makes sense to have rules defined using an ingress object)
		- Go to Google Cloud Menu -> Kebernetes Engine -> Clusters -> Click on button right "Connect" ->
		  and copy content from Command-line access, something like this:
		  gcloud container clusters get-credentials spikey-cluster --zone us-central1-a --project mihai-281118
		  and paste above command which was copied in command shell and type enter

		- kubectl run spikey-website --image gcr.io/mihai-281118/spikeysales-website@sha256:208afe5375e8910e483b8399a4939bc0a4eff51ce0f02ba110eb5b6657238f04 --port=80

		- kubectl expose pod spikey-website --target-port=80 --type=NodePort

		- Go to cloud shell -> Open Text Editor -> New -> File -> named -> ingress.yaml
		- new added file ingress.yaml, must contain follow:
			apiVersion: extensions/v1beta1
			kind: Ingress
			metadata:
			  name: spikey-website-ingress
			spec:
			  backend:
			    serviceName: spikey-website
			    servicePort: 80


		- kubectl create -f ingress.yaml
		- kubectl get ingress spikey-website-ingress --watch
		- kubectl describe ingress spikey-website-ingress
			- check 5 minute and run again:
				- kubectl describe ingress spikey-website-ingress (now see status "HEALTHY" for Backend serices: 
				  k8s-be-32134--8c7da843b470a595)

			- kubectl get ingress spikey-website-ingress
				- and copy ip from Address in browser

			- curl ip_address_who_was_copied_in_browser

		- Delete ingress
			- kubectl delete -f ingress.yaml



		- Persistent Volume Claims
			- Go to cloud shell -> Open Text Editor -> New -> Folder -> named -> spikey-wordpress
			- new added file spikey-wordpress, must contain follow files:
				  spikey-mysql-service.yaml,
				  spikey-mysql-volumeclaim.yaml,
				  spikey-mysql.yaml,
				  spikey-wordpress-service.yaml,
				  spikey-wordpress-volumeclaim.yaml,
				  spikey-wordpress.yaml
			  
			- Copy content of above files from github source:
				- https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/tree/master/wordpress-persistent-disks

			- cd spikey-wordpress
			- ls -l

			- kubectl apply -f spikey-mysql-volumeclaim.yaml
			- kubectl apply -f spikey-wordpress-volumeclaim.yaml
			- kubectl get pvc



		- Deploying and Exposing Multiple Services
			- cd spikey-wordpress
			- kubectl create secret generic mysql --from-literal=password=123four

			- kubectl create -f spikey-mysql.yaml
				- kubectl get pod -l app=mysql (and check 2 minute and see what will be status=running)

			- kubectl create -f spikey-mysql-service.yaml
			- kubectl get service mysql

			- kubectl create -f spikey-wordpress.yaml
				- kubectl get pod -l app=wordpress (and check 2 minute and see what will be status=running)

			- kubectl create -f spikey-wordpress-service.yaml
				- kubectl get svc -l app=wordpress (and check 2 minute and see what will be status=running)

			- Now, check from Kubernetes Engine -> Workloads and Services&Ingress -> and see the wordpress expose service



		- Exploring Services Pods Using kubectl
			- kubectl get pods -o=wide
			- kubectl delete pod -l app=mysql
			- kubectl get pods -o=wide
			- check a minut and try to run again
				- kubectl get pods -o=wide (you can see what pod was recreated)

			- kubectl delete service wordpress
			- gcloud compute forwarding-rules list
			
			- kubectl get pvc (and delete pvc)
			- kubectl delete pvc wordpress-volumeclaim

		
		- Create and Deploy a Custom Test Container
			- mkdir binary-auth
			- cd binary-auth
				- gcloud services enable container.googleapis.com
				- gcloud services enable binaryauthorization.googleapis.com
				- gcloud container clusters create binary-auth-cluster --zone us-central1-a
				- gcloud container clusters get-credentials binary-auth-cluster --zone us-central1-a
				- nano Dockerfile
					  FROM alpine
					  CMD tail -f /dev/null

				- CONTAINER_PATH=us.gcr.io/$PROJECT_ID/hello-world
				- docker build -t $CONTAINER_PATH ./
				- gcloud auth configure-docker --quiet
				- docker push $CONTAINER_PATH
				- kubectl run hello-world --image $CONTAINER_PATH
				- kubectl get pods

		- Enable Binary Authorization and Secure Cluster with a Policy
			- cd binary-auth
				- gcloud beta container clusters update binary-auth-cluster --enable-binauthz --zone us-central1-a
				- nano policy.yaml
					admissionWhitelistPatterns:
					- namePattern: gcr.io/google_containers/*
					- namePattern: gcr.io/google-containers/*
					- namePattern: k8s.gcr.io/*
					defaultAdmissionRule:
					  evaluationMode: ALWAYS_DENY
					  enforcementMode: ENFORCED_BLOCK_AND_AUDIT_LOG

				- gcloud beta container binauthz policy import policy.yaml
				- kubectl delete deployment --all / kubectl delete pod --all
				- kubectl delete event --all
				- kubectl run hello-world --image $CONTAINER_PATH (and you can see a error:
				  "(Forbidden): pods "hello-world" is forbidden: image policy webhook backend denied one or more images...)

				- kubectl get pods
			 















































































