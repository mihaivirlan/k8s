- Create a GKE cluster with two node pools
	- Go to Menu Google Cloud Platform -> Kubernetes Engine -> Clusters -> Create cluster ->
	  From "Node Pools" -> "default-pool" -> Security -> choose from Access scopes -> Set access for each API ->
          Storage -> Read Write -> Save -> From default-pool -> click left top -> Add Node Pool -> After added new "pool-1" ->
	  click edit "node pool" -> Name=preemptive-pool -> Size=1 -> From Nodes -> Select ->
	  "Enable preemptible nodes" checkbox -> select from "preemptive-pool" -> Security ->
	  Set access for each API -> Storage -> Read Write -> from "preemptive-pool" ->
	  Metadata -> Kubernetes labels -> Add Kubernetes label -> Key=preemptive && Value=true ->s
	  After above settings -> click Create Cluster -> After created cluster -> click on cluster ->
	  And see the details -> click Permissions -> And check the Storage -> and something else....

- Create Buckets
	- Go to Menu Google Cloud Platform -> Storage -> Browser -> Create Bucket -> Name=spikey-customer-reviews ->
	  click "Create Bucket" -> click "Upload files" -> choose one .csv file from your pc ->
	  click -> Upload -> After that click on Browser -> Create Bucket(and create another bucket) -> Name=spikey-customer-ratings ->
	  click "Create Bucket" -> From Storage -> Browser -> click on "Activate Cloud Shell" ->
	  From command line type ->
	  export PS1="\[\e[34m\]\w\[e\[m\]>\n-->" <type enter>
		- gcloud config set project mihai-281118(in my case project id is - mihai-281118)
		- gcloud config set compute/zone us-central1-a
	
	- Go to Kubernetes Engine -> Clusters -> click Connect button -> copy command from Command-line access ->
	  type copied command in Open Cloud Shell:
	  	gcloud container clusters get-credentials spikey-dev-cluster --zone us-central1-a --project mihai-281118 <type enter>
	  		- kubectl get nodes
			- kubectl describe node gke-spikey-dev-cluste-preemptive-pool-c02905f3-gzxl


- Implementing and Containerizing a Python Batch Application
	- Open Editor from Cloud Shell -> File -> New Folder -> Name for new folder=gke-dev -> 
	  create a subfolder for gke-dev=custom-ratings -> 
	  create a new file in subfolder custom-ratings named=python.py ->
	  edit your python.py file:
		from google.cloud import storage
		import pandas as pd
		import datetime
		import os
		import glob

		client = storage.Client(project='mihai-281118')

		home = str(os.path.expanduser("~"))
		if not os.path.exists(home+'/customer-reviews/'):
		    os.makedirs(home+'/customer-reviews/')

		bucket = client.get_bucket('spikey-customer-reviews')
		blobs = bucket.list_blobs(prefix='file-')

		for (i,blob) in enumerate(blobs):
		    print(blob)
		    blob.download_to_filename(home+'/customer-reviews/file'+str(i)+'.csv')

		path = home+'/customer-reviews'
		filenames = glob.glob(path+ "/*.csv")

		dataframe = pd.DataFrame()
		list = []
		for file in filenames:
		    df = pd.read_csv(file)
		    list_.append(df)
		dataframe = pd.concat(list_)

		customer_ratings = dataframe[["Class Name,"Rating"]].groupby('Class Name').agg('mean').sort_values(by=['Rating'],ascending=[True])

		date = datetime.datetime.now().strftime("%Y-%m-%d|%H:%M:%S")
		filename=str('customer_ratings'+'|'+date+'.csv')

		customer_ratings.to_csv(filename)

		mybucket = storage.bucket.Bucket(client=client, name='spikey-customer-ratings')

		blob = mybucket.blob(filename)
		blob.upload_from_filename(filename=filename)


	- in subfolder custom-ratings create a new file named=Dockerfile ->
	  edit Dockerfile:
		FROM python
		COPY . /src
		RUN pip install pandas
		RUN pip install gcsfs
		RUN pip install google-cloud-storage
		CMD ["python", "/src/python.py"]


	- Go back in cloud shell and move in directory
		- cd gke-dev ; cd customer-ratings
		- docker build -t gcr.io/mihai-281118/customer-ratings:v1 .
		- gcloud auth configure-docker
		- docker images
		- docker push gcr.io/mihai-281118/customer-ratings:v1


- Scheduling Jobs on a Custom Node Pool
	- Go in OPen Editor -> create a subfolder in folder gke-dev -> named=yaml-files ->
	  in subfolder "yaml-files" create a new file named=present-ratings-job.yaml ->
	  edit "present-ratings-job.yaml" file (in this file should not be tabs, only spaces):
		apiVersion: batch/v1
		kind: Job
		metadata:
		  name: present-ratings-job
		spec:
		  template:
		    metadata:
		      name: present-ratings-job
		      labels:
		        preemptive: "true"
		    spec:
		      containers:
		      - name: customer-ratings
		        image: gcr.io/mihai-281118/customer-ratings:v1
		      nodeSelector:
		        preemptive: "true"
		      restartPolicy: Never

	- cd ../yaml-files
	- kubectl apply -f present-ratings-job.yaml
	- After that go in Kubernetes Engine -> Workloads -> See new created job

	- gcloud auth configure-docker
	- gcloud container node-pools list --cluster spikey-dev-cluster
	- kubectl get nodes
	- kubectl taint nodes gke-spikey-dev-cluste-preemptive-pool-c02905f3-gzxl preemtive="true":NoSchedule
	- kubectl describe node gke-spikey-dev-cluste-preemptive-pool-c02905f3-gzxl
	- Go to Menu -> Storage -> Browser -> click on "spikey-customer-reviews2" ->
	  upload many other .csv files -> Open Editor from Cloud Shell -> 
	  Create a new file in yaml-files subdirectory named=weekly-ratings-cronjob.yaml ->
	  edit weekly-ratings-cronjob.yaml:
		apiVersion: batch/v1beta1
		kind: CronJob
		metadata:
		  name: weekly-ratings-cronjob
		spec:
		  schedule: "7 5 * * 3"
		  jobTemplate:
		    spec:
		      template:
			spec:
			  containers:
			  - name: customer-ratings
			    image: gcr.io/mihai-281118/customer-ratings:v1
			  restartPolicy: OnFailure


	- Go to Cloud Shell
		- kubectl apply -f weekly-ratings-cronjob.yaml
		- kubectl get jobs --watch


- Deploying a Stateless Application
	- Go to Cloud Shell Editor
		- Create a new folder named=spikey-website2
			- Create a new file named=index.html
				- and paste in index.html file the html code from follow source for example:
					- https://getbootstrap.com/docs/4.0/examples/blog/ (click right -> view source and copy+paste html)

			- Create a new file named=default.conf (nginx default file)
				server {
				   listen       80;
				   server_name  localhost;
				}


			- Create a new file named=Dockerfile
				FROM nginx:alpine
				COPY default.conf /etc/nginx/conf.d/default.conf
				COPY index.html /usr/share/nginx/html/index.html

			- Go to Cloud shell
				- export PS1="\[\e[34m\]\w\[e\[m\]>\n-->" <type enter>
				- gcloud config set project mihai-281118
				- gcloud auth configure-docker
				- cd ~
				- cd spikey-website2
				- ls
				- docker build -t gcr.io/mihai-281118/spikey-website2:v1 .
				- docker build -t gcr.io/mihai-281118/spikey-website2:v1-offer .

				- docker push gcr.io/mihai-281118/spikey-website2:v1
				- docker push gcr.io/mihai-281118/spikey-website2:v1-offer

				- Go to GCP Menu and check the Container Registry -> should be new build image

				- Open Cloud Shell Editor
					- create a file in gke-dev/yaml-files named=spikey-stateless-deployment.yaml
						apiVersion: apps/v1beta2
						kind: Deployment
						metadata:
						  name: spikey-website
						spec:
						  replicas: 3
						  selector:
						    matchLabels:
						      app: spikey-website
						  template:
						    metadata:
						      labels:
							app: spikey-website
						    spec:
						      containers:
						      - name: spikey-website
							image: gcr.io/mihai-281118/spikey-website2:v1
							ports:
							- containerPort: 8080

					- From Cloud Shell
						- cd gke-dev/yaml-files
							- kubectl apply -f spikey-stateless-deployment.yaml
							- kubectl describe deployment spikey-website
							- kubectl get pods
							- kubectl get pods -l app=spikey-website

							- Go In Workloads and acces pod -> and expose it on port 80:80
							- After exposed try to acces it on ip address
							- Go to Workloads -> click on pod -> Actions -> Rollong Update ->
							  Container images -> and here change image version from ->
							  gcr.io/mihai-281118/spikey-website2:v1 -> gcr.io/mihai-281118/spikey-website2:v1-offer ->
							  after 20 seconds check -> Active revisions ->
							  should be new version changed image after this Update

						- From Cloud Shell
							- cd gke-dev/yaml-files
							- kubectl rollout status deployment spikey-website
							- kubectl get pods -l app=spikey-website
							- Go to Workloads -> click on pod -> check from Active revisions -> 
							  number of revions and revision history
			
							- Go to Menu -> Kubernetes Engine -> Services & Ingress -> And access service with ip address

							- From Cloud Shell run
								- kubectl rollout undo deployment spikey-website --to-revision=1
								- kubectl get pods -l app=spikey-website

							- From Cloud Shell Editor -> gke-dev -> yaml-files ->
							  create new file named=spikey-stateful-deployment.yaml
								apiVersion: apps/v1beta2
								kind: StatefulSet
								metadata:
								  name: spikey-website
								spec:
								  serviceName: spikey-website
								  replicas: 3
								  updateStrategy:
								    type: RollingUpdate
								  selector:
								    matchLabels:
								      app: spikey-website
								  template:
								    metadata:
								      labels:
									app: spikey-website
								    spec:
								      containers:
								      - name: spikey-website
									image: gcr.io/mihai-281118/spikey-website2:v1
									ports:
									- containerPort: 80
									  name: spikey-website
									volumeMounts:
									- name: spikey-website
									  mountPath: /spikey-website-pv
								  volumeClaimTemplates:
								  - metadata:
								      name: spikey-website-pv
								    spec:
								      accessModes: [ "ReadWriteOnce" ]
								      resources:
								        requests:
									  storage: 1Gi


							- From Cloud Shell run
								- kubectl apply -f spikey-stateful-deployment.yaml
								- kubectl get pods -l app=spikey-website
								- kubectl delete pod spikey-website_id_pod















































