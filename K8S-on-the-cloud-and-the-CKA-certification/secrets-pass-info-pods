- Go in Google Cloud to project -> Activate Cloud Shell -> type from opened cloud shell:
- kubectl get pods

- echo -n 'my-app' | base64 (and follow in secrets.yaml file will use as username)
- echo -n '39528$vdg7Jb' | base64 (and follow in secrets.yaml file will use as password)

- nano secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: test-secret
data:
  username: bXktYXBw
  password: Mzk1MjgkdmRnN0pi

- kubectl create -f secrets.yaml
- kubectl get secret / kubectl get secret test-secret


- nano secrets-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: secret-test-pod
spec:
  containers:
    - name: test-container
      image: nginx
      volumeMounts:
          # name must match the volume name below
          - name: secret-volume
            mountPath: /etc/secret-volume
  # The secret data is exposed to Containers in the Pod through a Volume.
  volumes:
    - name: secret-volume
      secret:
        secretName: test-secret


- kubectl create -f secrets-pod.yaml
- kubectl get pod secret-test-pod
- kubectl exec -it secret-test-pod -- /bin/bash
	- cd /etc/secret-volume/
	- ls
	- cat username; echo; cat password; echo

- Create secres directly from files
- echo -n "mihail" > ./username.txt
- echo -n "MyFavouritePass" > ./password.txt
- kubectl create secret generic sensitive --from-file=./username.txt --from-file=./password.txt
- kubectl get secrets
- kubectl describe secrets/sensitive


- nano secret-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: secret-pod
spec:
  containers:
  - name: mycontainer
    image: redis
    env:
      - name: SECRET_USERNAME
        valueFrom:
          secretKeyRef:
            name: sensitive
            key: username.txt
      - name: SECRET_PASSWORD
        valueFrom:
          secretKeyRef:
            name: sensitive
            key: password.txt
  restartPolicy: Never

- kubectl apply -f secret-pod.yaml
- kubectl describe pods secret-pod
























